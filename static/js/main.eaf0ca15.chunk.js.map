{"version":3,"sources":["lib/String.ts","lib/Validation.ts","lib/Styles.ts","components/Box/index.tsx","components/Card/Card.tsx","components/Card/CardBody.tsx","components/Card/CardHeader.tsx","components/Form/Button/index.tsx","assets/warning.svg","components/Form/ErrorMessage/index.tsx","components/Form/Textarea/index.tsx","App/AddText/AddText.tsx","lib/Text.ts","App/Trainer/Stats/Stats.tsx","App/Trainer/Trainer.tsx","App/App.tsx","reportWebVitals.ts","index.tsx"],"names":["sep","validators","max","min","isChar","s","length","toCharArray","pipe","D","str","split","empty","A","NonEmptyString","trim","className","flow","G","is","chunks","join","fromNullableProp","styleFromProp","prop","O","constNull","toAlignItems","alignItems","toDirection","direction","toJustifyContent","justifyContent","Box","props","cn","Card","CardBody","CardHeader","toClassName","styling","Button","ErrorMesssage","children","src","dangerIcon","alt","Textarea","isInvalid","invalid","applicativeValidation","E","NEA","ValidationError","name","message","toError","this","create","Error","validateText","onFalse","a","validator","lift","AddText","handleAddText","React","useState","S","text","setText","submitted","setSubmitted","validationResult","validationErrors","i","error","maxLength","onChange","event","currentTarget","value","placeholder","rows","onClick","decode","type","Texts","textMaxIndex","texts","getTextFromFile","index","secondsToMinutes","seconds","Stats","errorsCount","finishedTyping","onAnotherText","onReset","startedTyping","textTyped","setSeconds","timer","useRef","useEffect","current","setInterval","clearInterval","charsCount","result","sequenceT","addSeconds","tupled","differenceInSeconds","difference","timeSpent","Math","floor","handleReset","disabled","eqOptionNumber","eqNumber","TrainerComponent","currentErrorIndex","setCurrentErrorIndex","errorIndexes","setErrorIndexes","setStartedTyping","setValue","chars","Date","trimRight","processedText","char","style","c","finishedTypingStyle","currentValue","constFalse","errorIndex","equals","onPaste","preventDefault","randomIndexOption","R","IO","generateRandomIndex","next","Trainer","customText","resetCustomText","textIndex","setTextIndex","generateIndex","handleAnotherText","App","tab","setTab","setCustomText","handleTab","renderTab","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eaf0ca15.chunk.js","sourcesContent":["import * as A from 'fp-ts/Array'\nimport { pipe } from 'fp-ts/function'\nimport * as D from 'io-ts/Decoder'\n\n/**\n * Char\n */\n\ninterface CharBrand {\n  readonly Char: unique symbol\n}\n\nexport type Char = string & CharBrand\n\nexport const isChar = (s: string): s is Char => s.length === 1\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const Char = pipe(D.string, D.refine(isChar, 'Char'))\n\nexport const fromCharArray = (chars: Array<Char>): string => chars.join(empty)\n\nexport const toCharArray = (str: string): Array<Char> => pipe(str.split(empty), A.filter(isChar))\n\nexport const whiteSpace = ' '\n\n/**\n * NonEmptyString\n */\n\ninterface NonEmptyStringBrand {\n  readonly NonEmptyString: unique symbol\n}\n\nexport type NonEmptyString = string & NonEmptyStringBrand\n\nexport const isNonEmptyString = (s: string): s is NonEmptyString => s.length > 0\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport const NonEmptyString = pipe(D.string, D.refine(isNonEmptyString, 'NonEmptyString'))\n\n/**\n * String\n */\n\nexport const empty = ''\n\nexport const isEmpty = (a: string): boolean => a === empty\n\nexport const cons = (a: string) => (b: string): string => b.concat(a)\n\nexport const snoc = (a: string) => (b: string): string => a.concat(b)\n\nexport const join = (sep: string) => (chunks: Array<string>): string => chunks.join(sep)\n\nexport const length = (str: string): number => str.length\n\nexport const slice = (start?: number, end?: number) => (str: string) => str.slice(start, end)\n\nexport const split = (sep: string) => (str: string): Array<string> => str.split(sep)\n\nexport const trim = (str: string): string => str.trim()\n","import * as E from 'fp-ts/Either'\nimport { flow, Lazy, pipe } from 'fp-ts/function'\nimport * as NEA from 'fp-ts/NonEmptyArray'\n\nexport const applicativeValidation = E.getValidation(NEA.getSemigroup<ValidationError>())\n\n/**\n * ValidationError\n */\n\nconst toError = (name: string, message: string): Error => ({ name, message })\n\nexport class ValidationError extends Error {\n  name = 'ValidationError'\n\n  static create(message: string): ValidationError {\n    return toError(this.name, message)\n  }\n\n  static onFalse(message: string): Lazy<ValidationError> {\n    return () => ValidationError.create(message)\n  }\n}\n\n/**\n * Validator\n */\n\nexport type Validator<A> = (a: A) => E.Either<ValidationError, A>\n\nexport const minLength = (min: number): Validator<string> =>\n  E.fromPredicate(\n    str => str.length >= min,\n    ValidationError.onFalse(`Value must be at least ${min} chars long!`),\n  )\n\nexport const maxLength = (max: number): Validator<string> =>\n  E.fromPredicate(\n    str => str.length <= max,\n    ValidationError.onFalse(`Value must be less than ${max} chars long!`),\n  )\n\n/**\n * LiftedValidator\n */\n\nexport type LiftedValidator<A> = (a: A) => E.Either<NEA.NonEmptyArray<ValidationError>, A>\n\nexport const lift = <A>(validator: Validator<A>): LiftedValidator<A> =>\n  flow(validator, E.mapLeft(NEA.of))\n\nexport const combine = <A>(validators: NEA.NonEmptyArray<Validator<A>>): LiftedValidator<A> => (\n  a: A,\n) =>\n  pipe(\n    validators,\n    NEA.map(validator => pipe(a, lift(validator))),\n    NEA.sequence(applicativeValidation),\n    E.map(() => a),\n  )\n","import * as A from 'fp-ts/Array'\nimport * as O from 'fp-ts/Option'\nimport { constNull, flow, pipe } from 'fp-ts/function'\nimport * as G from 'io-ts/Guard'\nimport * as S from './String'\n\nexport const className: (classNames: Array<string | null | undefined>) => string = flow(\n  A.filter(G.string.is),\n  S.join(' '),\n)\n\nexport const fromNullableProp = <Prop, Style>(styleFromProp: (prop: Prop) => Style) => (\n  prop?: Prop,\n): Style | null => pipe(O.fromNullable(prop), O.fold(constNull, styleFromProp))\n","import { pipe } from 'fp-ts/function'\nimport { className as cn, fromNullableProp } from 'lib/Styles'\nimport React from 'react'\nimport './Box.scss'\n\ntype AlignItems = 'start' | 'center' | 'end'\n\nconst toAlignItems = (alignItems: AlignItems): 'box--a-center' | 'box--a-end' | 'box--a-start' => {\n  switch (alignItems) {\n    case 'center':\n      return 'box--a-center'\n    case 'end':\n      return 'box--a-end'\n    case 'start':\n      return 'box--a-start'\n  }\n}\n\ntype Direction = 'column' | 'row'\n\nconst toDirection = (direction: Direction): 'box--d-row' | 'box--d-column' =>\n  direction === 'column' ? 'box--d-column' : 'box--d-row'\n\ntype JustifyContent = 'start' | 'center' | 'end' | 'space-between' | 'space-around'\n\nconst toJustifyContent = (\n  justifyContent: JustifyContent,\n):\n  | 'box--j-center'\n  | 'box--j-end'\n  | 'box--j-space-around'\n  | 'box--j-space-between'\n  | 'box--j-start' => {\n  switch (justifyContent) {\n    case 'center':\n      return 'box--j-center'\n    case 'end':\n      return 'box--j-end'\n    case 'space-around':\n      return 'box--j-space-around'\n    case 'space-between':\n      return 'box--j-space-between'\n    case 'start':\n      return 'box--j-start'\n  }\n}\n\ntype BoxProps = React.HTMLAttributes<HTMLDivElement> & {\n  alignItems?: AlignItems\n  direction?: Direction\n  justifyContent?: JustifyContent\n}\n\nexport const Box: React.FC<BoxProps> = ({\n  alignItems = 'start',\n  className,\n  direction = 'row',\n  justifyContent = 'start',\n  ...props\n}) => (\n  <div\n    className={cn([\n      className,\n      'box',\n      pipe(alignItems, fromNullableProp(toAlignItems)),\n      pipe(direction, fromNullableProp(toDirection)),\n      pipe(justifyContent, fromNullableProp(toJustifyContent)),\n    ])}\n    {...props}\n  />\n)\n","import { className as cn } from 'lib/Styles'\nimport React from 'react'\nimport './Card.scss'\n\ntype CardProps = React.HTMLAttributes<HTMLDivElement>\n\nexport const Card: React.FC<CardProps> = ({ className, ...props }) => (\n  <div className={cn([className, 'card'])} {...props} />\n)\n","import { className as cn } from 'lib/Styles'\nimport React from 'react'\nimport './Card.scss'\n\ntype CardBodyProps = React.HTMLAttributes<HTMLDivElement>\n\nexport const CardBody: React.FC<CardBodyProps> = ({ className, ...props }) => (\n  <div className={cn([className, 'card__body'])} {...props} />\n)\n","import { className as cn } from 'lib/Styles'\nimport React from 'react'\nimport './Card.scss'\n\ntype CardHeaderProps = React.HTMLAttributes<HTMLDivElement>\n\nexport const CardHeader: React.FC<CardHeaderProps> = ({ className, ...props }) => (\n  <div className={cn([className, 'card__header'])} {...props} />\n)\n","import { pipe } from 'fp-ts/function'\nimport { className as cn, fromNullableProp } from 'lib/Styles'\nimport React from 'react'\nimport './Button.scss'\n\ntype ButtonStyling = 'danger' | 'primary' | 'success'\n\nconst toClassName = (\n  styling: ButtonStyling,\n): 'button--danger' | 'button--primary' | 'button--success' => {\n  switch (styling) {\n    case 'danger':\n      return 'button--danger'\n    case 'primary':\n      return 'button--primary'\n    case 'success':\n      return 'button--success'\n  }\n}\n\ntype ButtonProps = React.ButtonHTMLAttributes<HTMLButtonElement> & {\n  styling?: ButtonStyling\n}\n\nexport const Button: React.FC<ButtonProps> = ({ className, styling, ...props }) => (\n  <button\n    className={cn([className, 'button', pipe(styling, fromNullableProp(toClassName))])}\n    {...props}\n  />\n)\n","export default __webpack_public_path__ + \"static/media/warning.fb997e48.svg\";","import dangerIcon from 'assets/warning.svg'\nimport { Box } from 'components/Box'\nimport React from 'react'\nimport './ErrorMessage.scss'\n\nexport const ErrorMesssage: React.FC = ({ children }) => (\n  <Box alignItems='center' className='error-message'>\n    <img className='error-message__icon' src={dangerIcon} alt='Danger icon' />\n    <p className='error-message__text'>{children}</p>\n  </Box>\n)\n","import { className as cn } from 'lib/Styles'\nimport React from 'react'\nimport * as G from 'io-ts/Guard'\nimport './Textarea.scss'\n\ntype TextareaProps = React.TextareaHTMLAttributes<HTMLTextAreaElement> & {\n  invalid?: boolean\n}\n\nexport const Textarea: React.FC<TextareaProps> = ({ className, invalid: isInvalid, ...props }) => (\n  <textarea\n    className={cn([\n      className,\n      'textarea',\n      G.boolean.is(isInvalid) ? (isInvalid ? 'textarea--invalid' : 'textarea--valid') : null,\n    ])}\n    {...props}\n  />\n)\n","import { Box } from 'components/Box'\nimport { Card, CardBody, CardHeader } from 'components/Card'\nimport { Button, ErrorMesssage, Textarea } from 'components/Form'\nimport * as A from 'fp-ts/Array'\nimport * as E from 'fp-ts/Either'\nimport { constNull, pipe } from 'fp-ts/function'\nimport * as S from 'lib/String'\nimport * as V from 'lib/Validation'\nimport React from 'react'\nimport './AddText.scss'\n\nconst TEXT_MAX_LENGTH = 1000\nconst TEXT_MIN_LENGTH = 100\n\nconst validateText = V.combine([V.minLength(TEXT_MIN_LENGTH), V.maxLength(TEXT_MAX_LENGTH)])\n\ntype AddTextProps = {\n  handleAddText: (text: S.NonEmptyString) => void\n}\n\nexport const AddText: React.FC<AddTextProps> = ({ handleAddText }) => {\n  const [text, setText] = React.useState(S.empty)\n  const [submitted, setSubmitted] = React.useState<boolean>(false)\n\n  const validationResult = validateText(text)\n\n  const handleChange = (event: React.SyntheticEvent<HTMLTextAreaElement>): void => {\n    setText(event.currentTarget.value)\n  }\n\n  const handleSubmit = (event: React.SyntheticEvent): void => {\n    setSubmitted(true)\n    pipe(\n      validationResult,\n      E.map(S.trim),\n      E.chainW(S.NonEmptyString.decode),\n      E.fold(constNull, handleAddText),\n    )\n  }\n\n  const validationErrors: Array<JSX.Element> | null = submitted\n    ? pipe(\n        validationResult,\n        E.fold(\n          A.mapWithIndex((i, error) => <ErrorMesssage key={i}>{error.message}</ErrorMesssage>),\n          constNull,\n        ),\n      )\n    : null\n\n  return (\n    <Card className='add-text mt-4'>\n      <CardHeader>\n        <h3 className='add-text__title'>Add Text</h3>\n      </CardHeader>\n\n      <CardBody>\n        <Box direction='column' className='add-text__form-group'>\n          <Textarea\n            className='add-text__text-field'\n            maxLength={TEXT_MAX_LENGTH}\n            onChange={handleChange}\n            placeholder='Paste your text here...'\n            rows={4}\n            value={text}\n          />\n          {validationErrors}\n        </Box>\n        <Box justifyContent='end' className='add-text__button-group'>\n          <Button onClick={handleSubmit} styling='success' type='submit'>\n            Submit\n          </Button>\n        </Box>\n      </CardBody>\n    </Card>\n  )\n}\n","import texts from 'assets/texts.json'\nimport * as A from 'fp-ts/Array'\nimport { pipe } from 'fp-ts/function'\nimport * as O from 'fp-ts/Option'\nimport * as D from 'io-ts/Decoder'\nimport * as S from 'lib/String'\n\nconst Texts = D.array(S.NonEmptyString)\n\nexport const textMaxIndex = texts.length - 1\n\nexport const getTextFromFile = (index: number): O.Option<S.NonEmptyString> =>\n  pipe(Texts.decode(texts), O.fromEither, O.chain(A.lookup(index)))\n","import { Box, Button } from 'components'\nimport { differenceInSeconds } from 'date-fns'\nimport { addSeconds } from 'date-fns/fp'\nimport { flow, pipe, tupled } from 'fp-ts/function'\nimport { sequenceT } from 'fp-ts/Apply'\nimport * as O from 'fp-ts/Option'\nimport React from 'react'\nimport './Stats.scss'\n\nconst secondsToMinutes = (seconds: number): number => seconds / 60\n\nconst wordsPerMinute = (charsCount: number) => (timeSpent: number): number =>\n  Math.floor(charsCount / 5 / timeSpent)\n\ntype StatsProps = {\n  errorsCount: number\n  finishedTyping: boolean\n  onAnotherText: () => void\n  onReset: () => void\n  startedTyping: O.Option<Date>\n  textTyped: string\n}\n\nexport const Stats: React.FC<StatsProps> = ({\n  errorsCount,\n  finishedTyping,\n  onAnotherText,\n  onReset,\n  startedTyping,\n  textTyped,\n}) => {\n  const [seconds, setSeconds] = React.useState<number>(0)\n\n  const timer = React.useRef<NodeJS.Timeout | null>(null)\n\n  React.useEffect(() => {\n    if (O.isSome(startedTyping)) {\n      timer.current = setInterval(() => setSeconds(seconds + 1), 1000)\n    }\n\n    return () => {\n      if (timer.current !== null) {\n        clearInterval(timer.current)\n      }\n    }\n  }, [seconds, startedTyping])\n\n  React.useEffect(() => {\n    if (finishedTyping && timer.current !== null) {\n      clearInterval(timer.current)\n    }\n  }, [finishedTyping])\n\n  const result = pipe(\n    sequenceT(O.option)(pipe(startedTyping, O.map(addSeconds(seconds))), startedTyping),\n    O.map(tupled(differenceInSeconds)),\n    O.filter(difference => difference > 1),\n    O.fold(() => 0, flow(secondsToMinutes, wordsPerMinute(textTyped.length))),\n  )\n\n  const handleReset = (): void => {\n    onReset()\n    setSeconds(0)\n  }\n\n  const handleAnotherText = (): void => {\n    handleReset()\n    onAnotherText()\n  }\n\n  return (\n    <Box alignItems='center' className='stats' justifyContent='space-between'>\n      <Box>\n        <p className='mr-2'>Time spent: {seconds} s</p>\n        <p className='mr-2'>Errors: {errorsCount}</p>\n        <p className='mr-2'>Result: {result} wpm</p>\n      </Box>\n\n      <Box alignItems='center'>\n        {finishedTyping ? <p className='stats__done mr-2'>Done!</p> : null}\n\n        <Button className='mr-2' type='button' onClick={handleAnotherText} styling='success'>\n          Another text\n        </Button>\n\n        <Button\n          type='button'\n          disabled={O.isNone(startedTyping)}\n          onClick={handleReset}\n          styling='danger'>\n          Restart\n        </Button>\n      </Box>\n    </Box>\n  )\n}\n","import { Card, CardBody, CardHeader } from 'components/Card'\nimport { Textarea } from 'components/Form'\nimport * as A from 'fp-ts/Array'\nimport { eqNumber } from 'fp-ts/Eq'\nimport { constFalse, constNull, pipe } from 'fp-ts/function'\nimport * as IO from 'fp-ts/IO'\nimport * as O from 'fp-ts/Option'\nimport * as R from 'fp-ts/Random'\nimport { getTextFromFile, textMaxIndex } from 'lib/Text'\nimport * as S from 'lib/String'\nimport { className } from 'lib/Styles'\nimport React from 'react'\nimport { Stats } from './Stats'\nimport './Trainer.scss'\n\nconst eqOptionNumber = O.getEq(eqNumber)\n\ntype TrainerComponentProps = {\n  onAnotherText: () => void\n  text: S.NonEmptyString\n}\n\nconst TrainerComponent: React.FC<TrainerComponentProps> = ({ onAnotherText, text }) => {\n  const [currentErrorIndex, setCurrentErrorIndex] = React.useState<O.Option<number>>(O.none)\n  const [errorIndexes, setErrorIndexes] = React.useState<Array<number>>(A.empty)\n  const [startedTyping, setStartedTyping] = React.useState<O.Option<Date>>(O.none)\n  const [value, setValue] = React.useState<string>(S.empty)\n\n  const chars = S.toCharArray(text)\n\n  React.useEffect(() => {\n    if (value === S.empty) {\n      setCurrentErrorIndex(O.none)\n    }\n  }, [value])\n\n  React.useEffect(() => {\n    if (O.isSome(currentErrorIndex)) {\n      setErrorIndexes(pipe(errorIndexes, A.cons(currentErrorIndex.value)))\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentErrorIndex])\n\n  React.useEffect(() => {\n    if (value !== S.empty && O.isNone(startedTyping)) {\n      setStartedTyping(O.some(new Date()))\n    }\n  }, [startedTyping, value])\n\n  const handleChange = (event: React.SyntheticEvent<HTMLTextAreaElement>): void => {\n    const currentValue = event.currentTarget.value\n\n    const disableInput = pipe(\n      currentErrorIndex,\n      O.fold(constFalse, index => currentValue.length - index > 10),\n    )\n\n    if (!disableInput) {\n      setValue(currentValue)\n    }\n\n    const errorIndex = pipe(\n      chars,\n      A.takeLeft(value.length),\n      A.zip(S.toCharArray(value)),\n      A.findIndex(([a, b]) => a !== b),\n    )\n\n    if (!eqOptionNumber.equals(errorIndex, currentErrorIndex)) {\n      setCurrentErrorIndex(errorIndex)\n    }\n  }\n\n  const handlePaste = (event: React.SyntheticEvent): void => event.preventDefault()\n\n  const onReset = (): void => {\n    setCurrentErrorIndex(O.none)\n    setErrorIndexes(A.empty)\n    setStartedTyping(O.none)\n    setValue(S.empty)\n  }\n\n  const finishedTyping = S.fromCharArray(chars) === value.trimRight()\n\n  const processedText = pipe(\n    chars,\n    A.mapWithIndex((i, char) => {\n      const style = pipe(\n        S.toCharArray(value),\n        A.lookup(i),\n        O.map(c =>\n          O.isSome(currentErrorIndex) && currentErrorIndex.value <= i\n            ? 'trainer__char--incorrect'\n            : c === char\n            ? 'trainer__char--correct'\n            : 'trainer__char--incorrect',\n        ),\n        O.toNullable,\n      )\n\n      const finishedTypingStyle = pipe(errorIndexes, A.elem(eqNumber)(i))\n        ? 'trainer__char--incorrect'\n        : 'trainer__char--correct'\n\n      return (\n        <span\n          className={className(['trainer__char', finishedTyping ? finishedTypingStyle : style])}\n          key={i}>\n          {char}\n        </span>\n      )\n    }),\n  )\n\n  return (\n    <Card className='trainer mt-4'>\n      <CardHeader>\n        <Stats\n          errorsCount={errorIndexes.length}\n          finishedTyping={finishedTyping}\n          onAnotherText={onAnotherText}\n          onReset={onReset}\n          startedTyping={startedTyping}\n          textTyped={value}\n        />\n      </CardHeader>\n\n      <CardBody>\n        <div className='trainer__text mb-2'>{processedText}</div>\n\n        <Textarea\n          className='trainer__input-field'\n          disabled={finishedTyping}\n          invalid={O.isSome(currentErrorIndex)}\n          onChange={handleChange}\n          onPaste={handlePaste}\n          placeholder='Start typing...'\n          rows={4}\n          value={value}\n        />\n      </CardBody>\n    </Card>\n  )\n}\n\nconst randomIndexOption: IO.IO<O.Option<number>> = pipe(R.randomInt(0, textMaxIndex), IO.map(O.of))\n\nconst generateRandomIndex = (next: O.Option<number>) => (\n  current: O.Option<number>,\n): O.Option<number> =>\n  eqOptionNumber.equals(current, next) ? generateRandomIndex(randomIndexOption())(current) : next\n\ntype TrainerProps = {\n  customText: O.Option<S.NonEmptyString>\n  resetCustomText: () => void\n}\n\nexport const Trainer: React.FC<TrainerProps> = ({ customText, resetCustomText }) => {\n  const [textIndex, setTextIndex] = React.useState<O.Option<number>>(O.none)\n\n  const generateIndex = (): void => {\n    setTextIndex(generateRandomIndex(randomIndexOption()))\n  }\n\n  const handleAnotherText = (): void => {\n    if (O.isSome(customText)) {\n      resetCustomText()\n    }\n\n    generateIndex()\n  }\n\n  React.useEffect(generateIndex, [])\n\n  return pipe(\n    customText,\n    O.alt(() => pipe(textIndex, O.chain(getTextFromFile))),\n    O.fold(constNull, text => <TrainerComponent onAnotherText={handleAnotherText} text={text} />),\n  )\n}\n","import { Box } from 'components'\nimport { Button } from 'components/Form'\nimport * as O from 'fp-ts/Option'\nimport * as S from 'lib/String'\nimport React from 'react'\nimport { AddText } from './AddText'\nimport './App.scss'\nimport { Trainer } from './Trainer'\n\ntype Tab = 'train' | 'add-text'\n\nconst App: React.FC = () => {\n  const [tab, setTab] = React.useState<Tab>('train')\n  const [customText, setCustomText] = React.useState<O.Option<S.NonEmptyString>>(O.none)\n\n  const handleAddText = (text: S.NonEmptyString): void => {\n    setCustomText(O.of(text))\n    setTab('train')\n  }\n\n  const resetCustomText = (): void => setCustomText(O.none)\n\n  const handleTab = (tab: Tab) => (): void => setTab(tab)\n\n  const renderTab = (): JSX.Element => {\n    switch (tab) {\n      case 'train':\n        return <Trainer customText={customText} resetCustomText={resetCustomText} />\n      case 'add-text':\n        return <AddText handleAddText={handleAddText} />\n    }\n  }\n\n  return (\n    <Box alignItems='center' direction='column'>\n      <Box alignItems='center' justifyContent='center' className='app__tabs mt-2'>\n        <Button\n          onClick={handleTab('train')}\n          styling={tab === 'train' ? 'success' : 'primary'}\n          type='button'>\n          Train\n        </Button>\n        <Button\n          onClick={handleTab('add-text')}\n          styling={tab === 'add-text' ? 'success' : 'primary'}\n          type='button'>\n          Add custom text\n        </Button>\n      </Box>\n\n      {renderTab()}\n    </Box>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App/App'\nimport './index.scss'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}